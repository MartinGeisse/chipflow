#!/usr/bin/tclsh

#-------------------------------------------------------------------------
# ypostproc --- post-process a mapped .blif file generated by yosys
#
# Note that this file handles mapped blif files ONLY.  The only statements
# allowed in the file are ".model", ".inputs", ".outputs", ".latch",
# ".gate" (or ".subckt"), and ".end".
#
# Lines using "$false" or "$true" are replaced with the net names for
# power and ground buses in the tech script (to be expanded to handle
# TIEHI and TIELO cells, if available in the standard cell set)


#
# Note: variables from ${techdir}/${techname}.sh are available!
#
# bnet: input.blif
# onet: output.blif
#

#-------------------------------------------------------------
# Now post-process the blif file
# The main thing to remember is that internal signals will be
# outputs of flops, but external pin names have to be translated
# to their internal names by looking at the OUTPUT section.
#-------------------------------------------------------------

while {[gets $bnet line] >= 0} {
   set line [string map {\[ \< \] \> \.subckt \.gate} $line]
   if [regexp {^.gate} $line lmatch] {
      break
   } elseif [regexp {^.names} $line lmatch] {
      break
   } elseif [regexp {^.latch} $line lmatch] {
      break
   }
   puts $onet $line
}

# Replace all .latch statements with .gate, with the appropriate gate type and pins,
# and copy all .gate statements as-is.

while {1} {

   # All lines starting with ".names" are converted into buffers.  These should be
   # pruned. . . 

   if [regexp {^.names} $line lmatch] {
      if {[regexp {\$true$} $line lmatch]} {
         set line [string map [subst {\\\$false $gndnet \\\$true $vddnet}] $line]
	 if [regexp {^.names[ \t]+([^ \t]+)[ \t]+([^ \t]+)[ \t]*$} $line lmatch sigin sigout] {
	    puts $onet ".gate BUFX2 A=${sigin} Y=${sigout}"
         }
         gets $bnet line
      }
   } else {
      set line [string map [subst {\\\$false $gndnet \\\$true $vddnet}] $line]
      puts $onet $line
   }
   if [regexp {^.end} $line lmatch] break

   if {[gets $bnet line] < 0} break
   set line [string map {\[ \< \] \> \.subckt \.gate} $line]
}
